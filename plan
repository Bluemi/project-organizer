# plan

Classes are Task, Concept, Bug, Problem and Implementation.
These classes are generally referred to with their lowercase inital letter (t, c, b, p, i).
Objects are instances of these classes, which are stored in files.

In every object, you can put so-called here-objects, which allow you to create an object just by using a name and a (short) description.
The syntax is `[<class-letter>/<name>; <description>]`.

For example:
`[t/Screen; Provides functions for rendering to the screen]`

or multiline:
[t/Screen;
	Concepts: "c/SomeConcept"

	# Description
	Provides functions for rendering to the screen
]

When declaring a here-object, the object-name is fully defined in the complete document.
When needing to refer to a here-object from another document, it's necesarry to first name the parent-object:
`<parent-class-letter>/<parent-name>/<class-letter>/<name>`

For example:
`c/Screen/t/Screen` if the task t/Screen is defined in c/Screen.


/		Contains c,t,p,i,b-folders which contain all objects (of the particular class). Every Task with name <name> is stored as the file /t/<name> and so on...
/root: 		The project will be defined here. In addition to the Task-Sample (see samples/t) it containes "Ideas" and a "Begin Date"

Task:
	A "task" describes what has to be done, NOT how to do it.

	Description:		First sentence is TL;DR. Should contain a list of features
	Approximate Duration:	in work hours
	Priority:		0.0 bis 1.0
	Done:			Yes/No
	Concepts:		List<Concept>, concepts which attempt to solve the Task

Concept:
	A "concept" describes how to do something, NOT what to do.

	Description:		First sentence is TL;DR
	Rating:
		Prediction:	as Text written before implementation, 
		Review:		as Text written after implementation
	Implementations/Tasks:	List<Implementation/Task>, subtasks and if the answer to the task is trivial an implementation

Bug:
	A run-time error, which has to be debugged in order to detect the Problem or Implementation-error which caused this.

	Description:		First sentence is TL;DR
	Inclusion:		Criterion for Inclusion
	Exclusion:		Criterion for Exclusion
	CausedBy:		Problem/Implementation, the reason for this bug.
	Logs:			List<Log>, list of documented Test-Logs.
				Logs contain:
					- test-setup (commit hashes)
					- test-result

Problem:
	A concept problem, which may be caused by clashing concepts or just one failing concept itself.

	Description:		first sentence is TL;DR
	CausedBy:		List<Concept>, list of Concepts which clash and therefore cause this problem.

Implementation:
	Close to "concept", but without any subtasks, and therefore very detailed, with snippets from header-files.

	Header/Class-Diagram:	A way to represent the implementation

# TODO excludes: "Some concepts/implementations explicitly exclude some things -- as a generic parameter in class C, prevents using a List<C>"
# TODO tags
